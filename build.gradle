plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.netflix.dgs.codegen' version '6.0.1'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// DGS
	implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter:9.1.0'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Генерация кода из схем
generateJava {
	schemaPaths = ["${projectDir}/src/main/resources/schema"]
	packageName = 'com.example.graphql_todo.generated'
	generateClient = true
}


compileJava.dependsOn generateJava

tasks.named('test') {
	useJUnitPlatform()
}

configurations.all {
	resolutionStrategy {
		force 'com.graphql-java:java-dataloader:3.3.0'
	}
}